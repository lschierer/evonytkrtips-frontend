---
import { Buff} from '@schemas/index';
import type { HTMLAttributes, HTMLTag, Polymorphic } from 'astro/types';

interface Props {
  buffArray: Buff[],
  title?: string,
  headingSize?: string,
  bgColor?: string,
}

const DEBUG = 1;

const { buffArray, title, headingSize, bgColor } = Astro.props;

if(buffArray == undefined || buffArray == null || buffArray.length == 0) {
  if(DEBUG) console.log(`attempt to use the BuffList component without providing a valid buff Array.`);
  throw new Error('Invalid Use of BuffList Component.');
}

let rowsNeeded = buffArray.length +1;

let headingText = '';
if(title && title.length >=1 ) {
  rowsNeeded++;
  if(headingSize && 1 <= +headingSize && +headingSize <= 5 ) {
    headingText = `<h${headingSize} class="spectrum-Detail spectrum-Detail--sizeS">${title}</h${headingSize}>`;
  }
  else {
    headingText = `<h5 class="spectrum-Detail spectrum-Detail--sizeS">${title}</h5>`;
  }
}

let bgString = '';
if(bgColor && bgColor.length >=1) {
  bgString = `${bgColor};`;
}
else {
  bgString="--sl-color-bg";
}

---
<div class="top">
  {title && 
    <Fragment set:html={headingText}  />
  }
  {buffArray.map((b) => (
    <div class="buffAttribute spectrum-Body spectrum-Body--sizeM">
      {bgColor}
      {b.condition && b.condition.join(' ')}
      {b.class}
      {b.attribute ? b.attribute : ' '}
      {b.value.number}{b.value.unit.localeCompare('percentage') ? '' : '%'}
    </div>
  ))}
</div>

<style define:vars={{ bgString }}>
  .top {
    display: subgrid;
    width: 100%;
    grid-column: span 1;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    background-color: var(--bgString);
  }

  .buffAttribute {
    display: list-item;
    padding-top: 0;
    padding-bottom: 0;
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 1rem;
    grid-column-start: 1;
    grid-row: span 1;
    background-color: var(--bgString);
  }

</style>