---
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from 'astro';
import type { ComponentProps } from 'astro/types';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';

import {
  General, 
  Buff,
  Speciality
} from '@schemas/index';

import SkillBook from '@components/SkillBook.astro';
type SkillBook = ComponentProps<typeof SkillBook>;

import HtmlBuff from '@components/HtmlBuff.astro';
type HtmlBuff = ComponentProps<typeof HtmlBuff>;

const DEBUG = true;
import { Debug } from 'astro:components';

type specialityRow = Record<string, number>;

export const getStaticPaths = (async () => {
  const generalEntries: CollectionEntry<'generals'>[] | undefined =
    await getCollection('generals');
  if(generalEntries) {
    return generalEntries.map((entry: CollectionEntry<'generals'>) => ({
      params: { id: entry.id },
      props: { entry },
    }));
  }
  else {
    if(DEBUG) console.log("No generalEntries returned from getCollection in getStaticPaths")
    throw new Error('No generals found.');
  }
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { id }: Params = Astro.params;
if (id === undefined) {
  if (DEBUG) console.log(`id was undefined`);
  throw new Error('Id is required');
}

const general: General = (Astro.props as Props).entry.data;

let ascendingRows = 0;
if(general.ascendingAttributes && Object.keys(general.ascendingAttributes).length >= 1) {
  const ascendingKeys = Object.keys(general.ascendingAttributes);
  ascendingKeys.forEach((ak) => {
    const buffs = general.ascendingAttributes[ak];
    ascendingRows = Math.max(ascendingRows, buffs.length );
  });
}
ascendingRows = ascendingRows * 2;


const specalityRows: specialityRow = {};
const specalityLevels =['Green', 'Blue', 'Purple', 'Orange', 'Gold'];
general.specialities.forEach((sp: Speciality) => {
  if(sp && Object.keys(sp).length >= 1) {  
    specalityLevels.forEach((slk: string) => {
      // @ts-expect-error
      const slv : Buff[] | undefined = sp[slk as keyof typeof sp];
      if(slv && Array.isArray(slv) && slv.length >= 1) {
        const rows = slv.length * 2;
        let current = (specalityRows[slk]) ?? 0;
        specalityRows[slk] = Math.max( current, rows);
        
      }
    })
  }
})

const GreenRows = specalityRows['Green'];
const BlueRows = specalityRows['Blue'];
const PurpleRows = specalityRows['Purple'];
const OrangeRows = specalityRows['Orange'];
const GoldRows = specalityRows['Gold'];

const maxSpecalityRows = 5 + GreenRows + BlueRows + PurpleRows + OrangeRows + GoldRows;

/*
const GreenKey = Object.keys(general.specialities[0]).find((key) => {
  return key.localeCompare('Green');
});

const BlueKey = Object.keys(general.specialities[0]).find((key) => {
  return key.localeCompare('Blue');
});

const PurpleKey = Object.keys(general.specialities[0]).find((key) => {
  return key.localeCompare('Purple');
});

const OrangeKey = Object.keys(general.specialities[0]).find((key) => {
  return key.localeCompare('Orange');
});

const GoldKey = Object.keys(general.specialities[0]).find((key) => {
  return key.localeCompare('Gold');
});
*/
---
<StarlightPage
  frontmatter={{ title: `Details for ${id}`, tableOfContents: {
    minHeadingLevel: 2,
    maxHeadingLevel: 5,
  } }}
>
<div>
  <h3 class="spectrum-Heading spectrum-Heading--sizeM">Base Stats:</h3>
  <p class="spectrum-Body spectrum-Body--sizeM">
    <strong>Leadership: </strong> {general.leadership} (+{general.leadership_increment} per level)
  </p>
  <p class="spectrum-Body spectrum-Body--sizeM">
    <strong>Attack: </strong> {general.attack} (+{general.attack_increment} per level)
  </p>
  <p class="spectrum-Body spectrum-Body--sizeM">
    <strong>Defense: </strong> {general.defense} (+{general.defense_increment} per level)
  </p>
  <p class="spectrum-Body spectrum-Body--sizeM">
    <strong>Politics: </strong> {general.politics} (+{general.politics_increment} per level)
  </p>
</div>

<div>
  <h3 class="spectrum-Heading spectrum-Heading--sizeM">Special Skill:</h3>
  <SkillBook name={general.builtInBook.name}></SkillBook>
</div>

{(general.otherBooks.length > 0) && (
  <div>
    <h3 class="spectrum-Heading spectrum-Heading--sizeM">General Skin/Outfit:</h3>
    {general.otherBooks.map((ob) => (
      <SkillBook name={ob.name}></SkillBook>
    ))}
  </div>
)}

{ general.ascendingAttributes && (
  <div class="not-content grid ascendingAttributes">
    <div class="not-content AscendingHeading">
      <h3 class="spectrum-Heading spectrum-Heading--sizeM">
        Ascending Skill Buffs
      </h3>
    </div>
    <div class="not-content AscendingBuffAttributes">
    {general.ascendingAttributes && 
      Object.keys(general.ascendingAttributes).map((ak, index) => {
        const title=`${index+1} Star`;
        const ascendingClass=`not-content AscendingIndex${index+1}`;
        const buffs: Buff[] = general.ascendingAttributes[ak];
        return (
          <div class={ascendingClass}>
            <div class="starHeading">
              {title}
            </div>
            {buffs.map((b) => (
              <div class="individualBuff">
                <HtmlBuff buff={b} ></HtmlBuff>
              </div> 
            ))}
          </div>
        );
      })
    }
    </div>
  </div>
)}

{(maxSpecalityRows >= 0) && (
  <div class="not-content grid specialities">
    <div class="not-content SpecalityHeading">
      <h3 class="spectrum-Heading spectrum-Heading--sizeM">
        Specialities
      </h3>
    </div>
    <div class="not-content TableOfSpecialities ">
      {general.specialities.map((sp, index) => {
        if(sp && Object.keys(sp).length >= 1) {
          const indexClass = `not-content SpecialityIndex${index+1}`;
          return (
            <div class={indexClass}>
              <div class="not-content SpecialityName">
                <p class="spectrum-Detail spectrum-Detail--sizeXL">
                  <strong>{sp.name}</strong>
                </p>
              </div>
              <div class="not-content SpecialityContent">
                {specalityLevels && 
                  specalityLevels.map((slk: string) => {
                  const levelClass = `not-content ${slk}`;
                  // @ts-expect-error
                  const slv: Buff[] | undefined = sp[slk as keyof typeof sp];
                  return (
                    <div class={levelClass}>
                      <div class="not-content slHeader">
                        {slk}
                      </div>
                      <div class="not-content slContent">
                        {(slv && Array.isArray(slv) && slv.length >=1 ) && slv.map((b: Buff) => (
                          <div class="not-content individualBuff">
                            <HtmlBuff buff={b} ></HtmlBuff>
                          </div> 
                        )) }
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          );
        }
      })}
    </div>
  </div>
)}

  <Debug entry={general} />
  <slot />
</StarlightPage>

<style define:vars={{ 
  ascendingRows, 
  maxSpecalityRows, 
  GreenRows, 
  BlueRows,  
  PurpleRows,
  OrangeRows,
  GoldRows,
  }}>
  <style>
  .grid {
    display: grid;
  }

  .subgrid {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
  }

  ul {
    margin: 0;
    padding-top: 0;
    padding-left: 1rem;
    
    & li {
      padding-top: 0;
      padding-bottom: 0;
      margin-top: 0;
      margin-bottom: 0;
      margin-left: 0.5rem;
    }
  }

  :is(div) {
    align-content: start;
    justify-content: start;
    margin: 0.1px;
  }

  .individualBuff {
    display: list-item;
    grid-row-end: span 1;
    padding-top: 0;
    padding-bottom: 0;
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 1.1rem;
  }

  .ascendingAttributes {
    width: 100%;
    height: fit-content;
  
    grid-template-columns: repeat(5, 1fr);
    grid-auto-rows: minmax(var(spectrum-spacing-200), 1fr));

  }

  .AscendingHeading {
    grid-column: 1/6;
    grid-row: 1, span 1;
    align-self: center;
  }

  .AscendingBuffAttributes {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column-end: span 6;
    grid-row-start: 2;
    grid-row-end: span var(--ascendingRows);    
  }

  .AscendingIndex1 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column-start: 1;
    grid-row-start: 2;
    grid-row-end: span calc(var(--ascendingRows) - 2);
  }

  .AscendingIndex2 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column-start: 2;
    grid-row-start: 2;
    grid-row-end: span calc(var(--ascendingRows) - 2);
  }

  .AscendingIndex3 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column-start: 3;
    grid-row-start: 2;
    grid-row-end: span calc(var(--ascendingRows) - 2);

    
  }

  .AscendingIndex4 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column-start: 4;
    grid-row-start: 2;
    grid-row-end: span calc(var(--ascendingRows) - 2);
  }

  .AscendingIndex5 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column-start: 5;
    grid-row-start: 2;
    grid-row-end: span calc(var(--ascendingRows) - 2);
  }

  .specialities {
    width: 100%;
    height: fit-content;
  
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: minmax(var(spectrum-spacing-200), 1fr));
  }

  .SpecalityHeading {
    grid-column: 1/5;
    grid-row-start: 1;
    grid-row: 1, span 1;
    align-self: center;
  }

  .TableOfSpecialities {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-row-start: 2;
    grid-row-end: span var(--maxSpecalityRows);
    grid-column: 1/5;
    align-self: center;
  }

  .SpecialityIndex1 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column: 1/2;
    grid-row-start: 2;
    grid-row-end: calc(var(--maxSpecalityRows));
  }

  .SpecialityIndex2 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column: 2/3;
    grid-row-start: 2;
    grid-row-end: calc(var(--maxSpecalityRows));
  }

  .SpecialityIndex3 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column: 3/4;
    grid-row-start: 2;
    grid-row-end: calc(var(--maxSpecalityRows));
  }

  .SpecialityIndex4 {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-column: 4/5;
    grid-row-start: 2;
    grid-row-end: calc(var(--maxSpecalityRows));
  }

  .SpecialityName {
    grid-row-start: 2;
    align-self: center;
  }

  .SpecialityContent {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-row-start: 3;
    grid-row-end: span var(--maxSpecalityRows);
  }

  .Green {
    background-color: var(--spectrum-global-color-green-400);
    grid-row-start: 3;
    grid-row-end: span var(--GreenRows);
  }

  .Blue {
    background-color: var(--spectrum-global-color-blue-400);
    grid-row-start: calc(var(--GreenRows) + 3);
    grid-row-end: span var(--GreenRows);
  }

  .Purple {
    background-color: var(--spectrum-global-color-purple-400);
    grid-row-start: calc(calc(var(--GreenRows) + 3) + var(--BlueRows));
    grid-row-end: span var(--PurpleRows);
  }

  .Orange {
    background-color: var(--spectrum-global-color-orange-400);
    grid-row-start: calc(calc(calc(var(--GreenRows) + 3) + var(--BlueRows)) + var(--PurpleRows));
    grid-row-end: span var(--OrangeRows);
  }

  .Gold {
    background-color: var(--spectrum-global-color-yellow-400);
    --sl-color-text-invert: var(--spectrum-global-color-black-600);
    grid-row-start: calc(calc(calc(calc(var(--GreenRows) + 3) + var(--BlueRows)) + var(--PurpleRows)) + var(--OrangeRows));
    grid-row-end: span var(--GoldRows);
  }


</style>